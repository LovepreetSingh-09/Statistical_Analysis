summary(college)
Auto
fix(Auto)
summary(Auto)
cor(Auto$mpg,Auto)
cor(Auto$mpg,Auto[:])
cor(Auto$mpg,Auto[1])
cor(Auto$mpg,Auto[2,3,4,5])
cor(Auto$mpg,Auto[c(2,3,4,5)])
cor(Auto$mpg,Auto[c(1,2,3,4,5)])
cor(Auto$mpg,Auto[c(1,2,3,4,5,6,7,8)])
cor(Auto$mpg,Auto[c(1:8)])
cor(Auto$mpg,Auto[,1:8)
cor(Auto$mpg,Auto[,1:8])
cor(Auto$mpg,Auto[1:8])
library(MASS)
fix(Boston)
names(Boston)
library(lm)
lr=lm(medv~lstat)
lr=lm(medv~lstat,data=Boston)
lr
summary(lr)
confint (lr)
predict (lr ,data.frame(lstat =(c(5 ,10 ,15) )),interval =" confidence ")
predict (lr ,data.frame(lstat =(c(5 ,10 ,15) )))
predict (lr ,data.frame(lstat =(c(5 ,10 ,15) )),interval =" confidence ")
?predict
predict (lr ,data.frame(lstat =(c(5 ,10 ,15) )),interval ="confidence")
predict (lr ,data.frame(lstat =(c(5 ,10 ,15) )),interval ="prediction")
plot(lstat ,medv)
attach(Boston)
plot(lstat,medv)
abline (lm.fit)
abline (lr)
par(mfrow =c(2,2))
plot(lr)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lr), residuals (lr))
plot(hatvalues (lr ))
which.max (hatvalues (lr))
lr =lm(medv ∼ lstat+age ,data=Boston )
summary (lr)
lr =lm(medv ∼ . ,data=Boston )
summary (lr)
lm(formula = medv ∼ lstat + I(lstat ^2))
summary(lr)
lr=lm(formula = medv ∼ lstat + I(lstat ^2))
summary(lr)
lr1 =lm(medv∼lstat)
summary(lr1)
anova(lm.fit ,lm.fit2)
anova(lr ,lr1)
library (ISLR)
fix(Hitters )
names(Hitters )
dim(Hitters )
sum(is.na(Hitters$Salary))
library(leaps)
install.packages("leaps")
library(leaps)
subset=regsubsets(Salary∼.,Hitters)
summary(subset)
subset=regsubsets(salary~.,Hitters,nvmax=10)
subset=regsubsets(Salary~.,Hitters,nvmax=10)
names(subset)
summary(subset)
names(summary(subset))
summary$rsq
summary(subset)$rsq
par(mfrow=c(2,2))
plot(summary(subset)$rss ,xlab=" Number of Variables ",ylab=" RSS",type="l")
plot(summary(subset)$adjr2 ,xlab =" Number of Variables ",ylab=" Adjusted RSq",type="l")
which.max(summary(subset)$adjr2)
ponts(10,summary(subset)$adjr2[10],col='red',cex=2,pch=20)
points(10,summary(subset)$adjr2[10],col='red',cex=2,pch=20)
coef(subset)
coef(subset,6)
coef(subset,11)
coef(subset,10)
subset=regsubsets(Salary~.,Hitters,nvmax=10,method='forward')
coef(subset_fwd,9)
subset_fwd=regsubsets(Salary~.,Hitters,nvmax=10,method='forward')
subset_bwd=regsubsets(Salary~.,Hitters,nvmax=10,method = 'backward')
coef(subset_fwd,9)
coef(subset_bwd,9)
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
train
test =(! train )
test
subset_best=regsubsets (Salary∼.,data=Hitters[train ,],nvmax =19)
test.mat=model.matrix (Salary∼.,data=Hitters [test ,])
test_matrix=model.matrix (Salary∼.,data=Hitters [test ,])
test_matrix
test_matrix=model.matrix (Salary∼.,data=Hitters [test ,])
test_matrix
errors=rep(NA,10)
for i in 1:10{
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
errors=rep(NA,10)
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
test_matrix=model.matrix (Salary∼.,data=Hitters [test ,])
test_matrix
errors=rep(NA,10)
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
nrow(test_matrix)
nrow(pred)
nrow(Hitters$Salary[test])
(Hitters$Salary[test])
test
table(test)
subset_best=regsubsets(Salary∼.,data=Hitters[train ,],nvmax =19)
test_matrix=model.matrix (Salary∼.,data=Hitters[test ,])
nrow(test_matrix)
hitters =na.omit(Hitters )
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =19)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
Hitters$Salary[test]
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
Hitters$Salary[test]
errors=rep(NA,10)
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
errors
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
Hitters$Salary[test]
hitters$Salary[test]
errors=rep(NA,10)
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((hitters$Salary[test]-pred)^2)
}
hitters
hitters=na.omit(hitters)
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
hitters$Salary[test]
na.omit(hitters$Salary[test])
hitters$Salary[test]
hitters=na.omit(hitters$Salary[test])
hitters$Salary[test]
hitters$Salary[test]
hitters=na.omit(hitters)
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
hitters =na.omit(Hitters )
dim(hitters)
Hitters =na.omit(Hitters )
dim(hitters)
hitters=na.omit(hitters)
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
hitters=na.omit(hitters$Salary[test])
hitters$Salary[test]
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
hitters =na.omit(Hitters )
hitters=na.omit(hitters)
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
hitters$Salary[test]
train=sample (c(TRUE ,FALSE), nrow(hitters ),rep=TRUE)
train
test =(! train )
table(test)
hitters=na.omit(hitters)
subset_best=regsubsets(Salary∼.,data=hitters[train ,],nvmax =10)
test_matrix=model.matrix (Salary∼.,data=hitters[test ,])
nrow(test_matrix)
hitters$Salary[test]
errors=rep(NA,10)
for (i in 1:10){
coefi=coef(subset_best,id=i)
pred=test_matrix[,names(coefi)]%*%coefi
errors[i]=mean((hitters$Salary[test]-pred)^2)
}
errors
which.min(errors)
k=10
set.seed (1)
folds=sample (1:k,nrow(Hitters ),replace =TRUE)
cv.errors =matrix (NA ,k,19, dimnames =list(NULL , paste (1:19) ))
cv.errors
for(j in 1:k){
best.fit =regsubsets (Salary∼.,data=Hitters [folds !=j,],
nvmax =19)
for(i in 1:19) {
pred=predict (best.fit ,Hitters [folds ==j,], id=i)
cv.errors [j,i]=mean( (Hitters$Salary[folds ==j]-pred)^2)
}
}
for(j in 1:k){
best.fit =regsubsets (Salary∼.,data=Hitters [folds !=j,], nvmax =19)
for(i in 1:10) {
pred=predict (best.fit ,hitters [folds ==j,], id=i)
cv.errors [j,i]=mean((hitters$Salary[folds ==j]-pred)^2)
}
}
source('~/R/Statistical_Analysis/model_selection.R', encoding = 'UTF-8')
# Ridge Regression
x=model.matrix(Salary~.,hitters)[,-1]
x
y=hitters$Salary
y
install.packages("glmnet")
grid=10*seq(10,-2,length=100)
grid
# Ridge Regression
# alpha=0 for ridge and 1 for lasso
library(glmnet)
# glmnet automatically standardize the variables
ridge=glmnet(x,y,alpha=0,lambda=grid)
grid=10*seq(10,-2,length=100)
grid
# glmnet automatically standardize the variables
ridge=glmnet(x,y,alpha=0,lambda=grid)
grid=10^seq(10,-2,length=100)
grid
# glmnet automatically standardize the variables
ridge=glmnet(x,y,alpha=0,lambda=grid)
coef(ridge)
dim(coef(ridge))
ridge$lambda
ridge$lambda[50]
coef(ridge)[,50]
sqrt(sum(coef(ridge)[-1,50]^2))
predict(ridge,s=50,type='coefficients')[1:20,]
predict(ridge,s=50,type='coefficients')
set.seed (1)
train=sample (1: nrow(x), nrow(x)/2)
test=(- train )
y.test=y[test]
pred=predict(ridge,s=4,newx=x[test,])
ridge=glmnet(x[train,],y[train,],lambda=grid,alpha=0,thresh = 1e-12)
ridge=glmnet(x[train,],y[train],lambda=grid,alpha=0,thresh = 1e-12)
pred=predict(ridge,s=4,newx=x[test,])
mean((y[test]-pred)^2)
# glmnet automatically standardize the variables
?glmnet
pred=predict(ridge,s=15,newx=x[test,])
mean((y[test]-pred)^2)
pred=predict(ridge,s=100,newx=x[test,])
mean((y[test]-pred)^2)
pred=predict(ridge,s=5,newx=x[test,])
mean((y[test]-pred)^2)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict(ridge,s=0, newx=x[test ,], exact=T)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict(ridge,s=0, newx=x[test,], exact=T)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict(ridge,s=0, newx=x[test,], exact=TRUE)
ridge=glmnet(x[train,],y[train],lambda=grid,alpha=0,thresh = 1e-12)
pred=predict(ridge,s=5,newx=x[test,])
mean((y[test]-pred)^2)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict(ridge,s=0, newx=x[test,], exact=TRUE)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict.glmnet(ridge,s=0, newx=x[test,], exact=TRUE)
# glmnet() yield the exact least squares coefficients when λ = 0, for this we use the argument exact=T
pred=predict(ridge,s=0, newx=x[test,], exact=TRUE)
lm(y∼x, subset =train)
predict (ridge ,s=0, exact =T,type=" coefficients") [1:20 ,]
predict(ridge,s=50,type='coefficients')
predict (ridge ,s=0, exact =T,type=" coefficients")
predict (ridge ,s=0, exact =T,type= 'coefficients')
predict(ridge ,s=0, exact =T,type= 'coefficients')
library (pls)
install.packages("pls")
set.seed (2)
pcr=pcr(Salary∼., data=Hitters ,scale=TRUE , validation ="CV")
library (pls)
set.seed (2)
pcr=pcr(Salary∼., data=Hitters ,scale=TRUE , validation ="CV")
summary(pcr)
> validationplot(pcr ,val.type=" MSEP")
validationplot(pcr ,val.type=" MSEP")
validationplot(pcr ,val.type= 'MSEP')
pls=plsr(Salary∼., data=Hitters ,subset =train ,scale=TRUE ,validation ="CV")
summary(pls)
validationplot(pls ,val.type="MSEP")
pls.pred=predict (pls ,x[test ,], ncomp =2)
mean((pls.pred -y.test)^2)
library(stats)
attach(mtcars)
str(mtcars)
summary(mtcars)
cluster(mtcars)
library(e1071)
cluster(mtcars)
library(cluster, lib.loc = "C:/Program Files/R/R-3.6.1/library")
cluster(mtcars)
norm=function(x){
(x-min(x))/(max(x)-min(x))
}
mtcars=as.data.frame(lapply(mtcars, norm))
summary(mtcars)
?stats
library(help='stats')
?hclust
hclust(mtcars,method = 'complete')
mtcars=na.omit(mtcars)
hclust(mtcars,method = 'complete')
mtcars1=na.omit(mtcars)
summary(mtcars1)
hclust(mtcars1,method = 'complete')
clusters=hclust(mtcars1,method = 'complete')
str(mtcars)
clusters=hclust(mtcars,method = 'complete')
summary(mtcars)
clusters=hclust(mtcars[:,:],method = 'complete')
clusters=hclust(mtcars[],method = 'complete')
clusters=hclust(mtcars,5,method = 'complete')
clusters=hclust(mtcars,"cen",method = 'complete')
clusters=hclust(dist(mtcars),"cen",method = 'complete')
clusters=hclust(dist(mtcars),"cen")
clusters.method
clusters.methods
clusters=hclust(dist(mtcars),"cen",5)
clusters=hclust(dist(mtcars),"cen",method = 'complete')
clusters.dist
clusters=hclust(dist(mtcars),"cen")
clusters
clusters.centers
clusters.labels
plot(clusters)
clusters=hclust(dist(mtcars)^2,"cen")
clusters.labels
plot(clusters)
clusters
clusters.Distance
clusters$Distance
clusters$dist.method
clusters$dist
clusters$labels
clusters$merge(5)
clusters$call
clusters$height
clusters=hclust(dist(mtcars),"cen")
clusters
plot(clusters)
clusters$dist
clusters$labels
clusters$height
m=as.matrix(1:24,nrow=6,ncol=4)
m
?as.matrix
m=as.matrix(1:24,nrow=6,ncol=4,byrow=TRUE)
m
m=as.matrix(data=[1:6,7:12,13:18,20:24],nrow=6,ncol=4,byrow=TRUE)
m=as.matrix(data=c(1:6,7:12,13:18,20:24),nrow=6,ncol=4,byrow=TRUE)
m=as.matrix(data=c(1:6,7:12,13:18,20:24),nrow=6,ncol=4)
m=as.matrix(c(1:6,7:12,13:18,20:24),nrow=6,ncol=4)
m
m=as.matrix(c(1:6,7:12,13:18,20:24),nrow=6,ncol=4,byrow=TRUE)
m
m=matrix(c(1:6,7:12,13:18,20:24),nrow=6,ncol=4,byrow=TRUE)
m=matrix(c(1:6,7:12,13:18,19:24),nrow=6,ncol=4,byrow=TRUE)
m
m[3,2]
diag(m)
rev(diag(m))
diag(m,ncol = 4)
clusters$order
?as.data.frame
?data.frame
sum(m)
a=data.frame('Roll No.'=c(21,22,23),"name"=c('riya','john','vicky'),'section'=c('A','B','C'))
a
a=data.frame('Roll No.'=c(21,22,23),"name"=c('riya','john','vicky'),'section'=c('A','B','C'),'marks'=c(26,35,44))
a
bakery=read.transactions('bakery.csv')
bakery=read.transaction('bakery.csv')
library(arules)
bakery=read.transaction('bakery.csv')
bakery=read.transactions('bakery.csv')
bakery=read.transactions('bakery.csv')
inspect(bakery)
fix(bakery)
as.numeric(bakey[1])
as.numeric(bakery[1])
as.character(bakery[1])
inspect(bakery[3])
inspect(bakery[,3])
fix(bakery)
summary(bakery)
bakery
as.character(bakery[1])
inspect(bakery[1:3])
inspect(bakery[1:20])
itemFrequency(bakery)
itemFrequency(bakery[,c(2:)])
itemFrequency(bakery[,2:])
itemFrequency(bakery[,2])
itemFrequency(bakery[,c(2,3,4,5)])
itemFrequency(bakery[,1:3])
itemFrequencyPlot(bakery,support=0.4)
itemFrequencyPlot(bakery,support=0.1)
inspect(bakery[1:20])
itemFrequency(bakery[,1:4])
itemFrequency(bakery[,1:])
itemFrequency(bakery[,:])
itemFrequency(bakery[,])
bakery
itemFrequency(bakery[,1])
fix(itemFrequency(bakery[,1]))
fix(itemFrequency(bakery))
fix(bakery)
itemFrequency(bakery[,1:5])
bakery
summary(bakery)
itemFrequencyPlot(bakery,support=0.001)
bakery=read.transactions('bakery.csv',sep='&')
inspect(bakery[,3])
fix(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
bakery=read.transactions('bakery.csv')
inspect(bakery[,3])
bakery=read.transactions('bakery.csv')
fix(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
itemFrequencyPlot(bakery,topN=10)
bakery=read.transactions('bakery.csv')
fix(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
itemFrequencyPlot(bakery,topN=10)
bakery=read.transactions('bakery.csv')
fix(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
bakery=read.transactions('bakery.csv')
fix(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
itemFrequencyPlot(bakery,topN=10)
image(bakery[1:5])
image(bakery[,1:20])
image(bakery[1:20])
image(sample(bakery,100)
image(sample(bakery,100))
image(sample(bakery,100))
image(sample(bakery,10000))
image(sample(bakery,100))
image(sample(bakery,1000))
itemFrequencyPlot(bakery,confidence=0.01)
itemFrequencyPlot(bakery,confidence=0.1)
bake=apriori(bakery,parameters=list(support=0.001,confidence=0.05,minlen=2))
bake=apriori(bakery,parameters=list(support=0.001,confidence=0.005,minlen=2))
bake=apriori(bakery,parameters=list(support=0.001,confidence=0.005,minlen=2))
bake=apriori(bakery,parameters=list(support=0.001,minlen=2))
bake=apriori(bakery,parameter=list(support=0.001,confidence=0.005,minlen=2))
bake
summary(gro)
summary(bake)
inspect(bake)
bake
summary(bake)
bakery=unique(bakery)
summary(bakery)
bakery
inspect(bakery[1:20])
itemFrequency(bakery[,1:5])
itemFrequencyPlot(bakery,support=0.001)
itemFrequencyPlot(bakery,confidence=0.1)
itemFrequencyPlot(bakery,topN=10)
end()
